{"version":3,"sources":["utils.ts","opcodes.ts","disassembler.ts","bootcode.js","App.js","index.js"],"names":["convertNumberToHexString","n","toString","convertHexStringToDecimalNumber","s","parseInt","zeroPadHalfByte","numberAsHexString","length","Error","generateOpcodeToken","instruction","cycles","flags","operandType","operand","opcodes","cbOpcodes","generateDisassembledInstruction","opcodeToken","bytecode","index","position","code","undefined","Z","N","H","disassemble","disassembledCode","i","opcode","push","referencedObOpcodeToken","bootCode","bootCodeUIntArr","Uint8Array","App","useState","bootcode","setBootCode","console","log","window","className","height","width","type","onChange","e","target","files","reader","FileReader","onload","result","readAsArrayBuffer","map","line","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0b9a5f1.chunk.js","sourcesContent":["export function convertNumberToHexString(n: number) {\n  return n.toString(16);\n}\n\nexport function convertHexStringToDecimalNumber(s: string) {\n  return parseInt(s, 16);\n}\n\nexport function zeroPadHalfByte(n: number | string) {\n  const numberAsHexString = typeof n === 'number' ? convertNumberToHexString(n) : n;\n\n  switch (numberAsHexString.length) {\n    case 0:\n      return '0000';\n    case 1:\n      return `000${numberAsHexString}`;\n    case 2:\n      return `00${numberAsHexString}`;\n    case 3:\n      return `0${numberAsHexString}`;\n    case 4:\n      return numberAsHexString;\n    default:\n      throw new Error('Invalid number passed to zeropad');\n  }\n}\n","import * as flags from './flags';\n\ntype Registers =\n  | 'A'\n  | 'B'\n  | 'C'\n  | 'D'\n  | 'E'\n  | 'F'\n  | 'H'\n  | 'L'\n  | 'AF'\n  | 'BC'\n  | 'DE'\n  | 'HL'\n  | 'SP'\n  | 'PC';\n\ntype FlagState = 'flip' | 'set' | 'reset';\n\ntype Flags = {\n  Z?: FlagState;\n  N?: FlagState;\n  H?: FlagState;\n  C?: FlagState;\n};\n\n// d8  means immediate 8 bit data\n// d16 means immediate 16 bit data\n// a8  means 8 bit unsigned data, which are added to $FF00 in certain instructions (replacement for missing IN and OUT instructions)\n// a16 means 16 bit address\n// r8  means 8 bit signed data, which are added to program counter\ntype OperandTypes = 'd8' | 'd16' | 'a8' | 'a16' | 'r8' | Registers;\n\nexport type OpcodeToken = {\n  instruction: string;\n  length: number;\n  cycles: number;\n  flags: Flags | null;\n  operand: OperandTypes | null;\n};\n\nfunction generateOpcodeToken(\n  instruction: string,\n  length: number,\n  cycles: number,\n  flags: Flags | null = null,\n  operandType: OperandTypes | null = null\n): OpcodeToken {\n  return {\n    instruction,\n    length,\n    cycles,\n    flags,\n    operand: operandType,\n  };\n}\n\nconst opcodes: OpcodeToken[] = [];\nconst cbOpcodes: OpcodeToken[] = [];\n\nopcodes[0x00] = generateOpcodeToken('NOP', 1, 4);\nopcodes[0x21] = generateOpcodeToken('LD HL', 3, 12, undefined, 'd16');\nopcodes[0x31] = generateOpcodeToken('LD SP', 3, 12, undefined, 'd16');\nopcodes[0x32] = generateOpcodeToken('LD (HL-)', 1, 8, undefined, 'A');\nopcodes[0xaf] = generateOpcodeToken('XOR A', 1, 4, { Z: 'flip' });\nopcodes[0xcb] = generateOpcodeToken('PREFIX CB', 1, 4);\n\ncbOpcodes[0x7c] = generateOpcodeToken('BIT 7', 2, 8, { Z: 'flip', N: 'reset', H: 'set' }, 'H');\n\nexport { opcodes, cbOpcodes };\n","import {\n  convertHexStringToDecimalNumber,\n  convertNumberToHexString,\n  zeroPadHalfByte,\n} from './utils';\nimport { opcodes, cbOpcodes } from './opcodes';\nimport type { OpcodeToken } from './opcodes';\n\ntype DisassembledInstructionToken = {\n  position: string;\n  code: string;\n};\n\nfunction generateDisassembledInstruction(\n  opcodeToken: OpcodeToken,\n  bytecode: Uint8Array,\n  index: number\n): DisassembledInstructionToken {\n  switch (opcodeToken.operand) {\n    case 'A':\n      return {\n        position: `$${zeroPadHalfByte(index)}`,\n        code: `${opcodeToken.instruction},${opcodeToken.operand}`,\n      };\n    case 'H':\n      return {\n        position: `$${zeroPadHalfByte(index)}`,\n        code: `${opcodeToken.instruction},${opcodeToken.operand}`,\n      };\n    case 'd16':\n      return {\n        position: `$${zeroPadHalfByte(index)}`,\n        code: `${opcodeToken.instruction},$${convertNumberToHexString(\n          bytecode[index + 2]\n        )}${convertNumberToHexString(bytecode[index + 1])}`,\n      };\n    default:\n      return {\n        position: `$${zeroPadHalfByte(index)}`,\n        code: `${opcodeToken.instruction}`,\n      };\n  }\n}\n\nfunction disassemble(bytecode: Uint8Array) {\n  debugger;\n  const disassembledCode: DisassembledInstructionToken[] = [];\n\n  for (let i = 0; i < bytecode.length; ) {\n    const opcode = bytecode[i];\n\n    switch (opcode) {\n      case convertHexStringToDecimalNumber('0x00'): {\n        const opcodeToken = opcodes[opcode];\n        disassembledCode.push(generateDisassembledInstruction(opcodeToken, bytecode, i));\n        i += opcodeToken.length;\n        break;\n      }\n      case convertHexStringToDecimalNumber('0x21'): {\n        const opcodeToken = opcodes[opcode];\n        disassembledCode.push(generateDisassembledInstruction(opcodeToken, bytecode, i));\n        i += opcodeToken.length;\n        break;\n      }\n      case convertHexStringToDecimalNumber('0x31'): {\n        const opcodeToken = opcodes[opcode];\n        disassembledCode.push(generateDisassembledInstruction(opcodeToken, bytecode, i));\n        i += opcodeToken.length;\n        break;\n      }\n      case convertHexStringToDecimalNumber('0x32'): {\n        const opcodeToken = opcodes[opcode];\n        disassembledCode.push(generateDisassembledInstruction(opcodeToken, bytecode, i));\n        i += opcodeToken.length;\n        break;\n      }\n      case convertHexStringToDecimalNumber('0xaf'): {\n        const opcodeToken = opcodes[opcode];\n        disassembledCode.push(generateDisassembledInstruction(opcodeToken, bytecode, i));\n        i += opcodeToken.length;\n        break;\n      }\n      case convertHexStringToDecimalNumber('0xcb'): {\n        // opcode 0xcb references opcodes from the CB opcode table\n        const opcodeToken = opcodes[opcode];\n        const referencedObOpcodeToken = cbOpcodes[bytecode[i + opcodeToken.length]];\n        if (referencedObOpcodeToken) {\n          disassembledCode.push(\n            generateDisassembledInstruction(referencedObOpcodeToken, bytecode, i)\n          );\n        } else {\n          disassembledCode.push({\n            position: `$${zeroPadHalfByte(i)}`,\n            code: `Unknown opcode`,\n          });\n        }\n        i += opcodeToken.length;\n        break;\n      }\n      default:\n        disassembledCode.push({\n          position: `$${zeroPadHalfByte(i)}`,\n          code: `Unknown opcode`,\n        });\n        i++;\n    }\n  }\n  debugger;\n\n  return disassembledCode;\n}\n\nexport default disassemble;\n","import { convertHexStringToDecimalNumber } from './utils';\n\nconst bootCode =\n  /* 00000000 */ '31 fe ff af 21 ff 9f 32 cb 7c 20 fb 21 26 ff 0e ' +\n  /* 00000010 */ '11 3e 80 32 e2 0c 3e f3 e2 32 3e 77 77 3e fc e0 ' +\n  /* 00000020 */ '47 11 04 01 21 10 80 1a cd 95 00 cd 96 00 13 7b ' +\n  /* 00000030 */ 'fe 34 20 f3 11 d8 00 06 08 1a 13 22 23 05 20 f9 ' +\n  /* 00000040 */ '3e 19 ea 10 99 21 2f 99 0e 0c 3d 28 08 32 0d 20 ' +\n  /* 00000050 */ 'f9 2e 0f 18 f3 67 3e 64 57 e0 42 3e 91 e0 40 04 ' +\n  /* 00000060 */ '1e 02 0e 0c f0 44 fe 90 20 fa 0d 20 f7 1d 20 f2 ' +\n  /* 00000070 */ '0e 13 24 7c 1e 83 fe 62 28 06 1e c1 fe 64 20 06 ' +\n  /* 00000080 */ '7b e2 0c 3e 87 e2 f0 42 90 e0 42 15 20 d2 05 20 ' +\n  /* 00000090 */ '4f 16 20 18 cb 4f 06 04 c5 cb 11 17 c1 cb 11 17 ' +\n  /* 000000a0 */ '05 20 f5 22 23 22 23 c9 ce ed 66 66 cc 0d 00 0b ' +\n  /* 000000b0 */ '03 73 00 83 00 0c 00 0d 00 08 11 1f 88 89 00 0e ' +\n  /* 000000c0 */ 'dc cc 6e e6 dd dd d9 99 bb bb 67 63 6e 0e ec cc ' +\n  /* 000000d0 */ 'dd dc 99 9f bb b9 33 3e 3c 42 b9 a5 b9 a5 42 3c ' +\n  /* 000000e0 */ '21 04 01 11 a8 00 1a 13 be 20 fe 23 7d fe 34 20 ' +\n  /* 000000f0 */ 'f5 06 19 78 86 23 05 20 fb 86 20 fe 3e 01 e0 50';\n\n// The bootcode is 256 bytes, so that's how long the typed array should be\nconst bootCodeUIntArr = new Uint8Array(256);\n\n// Each character couple is a byte in hex\n// Step is 3 to accommodate for the spaces, otherwise it would be 2\nconst loopStep = 3;\n\nfor (let i = 0; i < bootCode.length; i += loopStep) {\n  // Keep the bootCodeUIntArr index incrementing by +1 on each iteration\n  bootCodeUIntArr[i / loopStep] = convertHexStringToDecimalNumber(\n    `${bootCode[i]}${bootCode[i + 1]}`\n  );\n}\n\nexport default bootCodeUIntArr;\n","import disassemble from './disassembler';\nimport { Fragment, useState } from 'react';\nimport bootcode from './bootcode';\n\nfunction App() {\n  const [bootCode, setBootCode] = useState(bootcode);\n\n  console.log(bootCode);\n\n  window.bootCode = bootCode;\n\n  return (\n    <Fragment>\n      <div className=\"screen-container\">\n        <h2>GameBoy JS emulator</h2>\n        <canvas height={144} width={160} />\n        {bootCode ? (\n          <span>bootcode loaded</span>\n        ) : (\n          <Fragment>\n            <span>drop the bootcode here</span>\n            <input\n              type=\"file\"\n              onChange={(e) => {\n                if (e.target.files.length) {\n                  const reader = new FileReader();\n\n                  reader.onload = function (e) {\n                    setBootCode(new Uint8Array(e.target.result));\n                  };\n\n                  reader.readAsArrayBuffer(e.target.files[0]);\n                }\n              }}\n            />\n          </Fragment>\n        )}\n      </div>\n      {bootCode ? (\n        <Fragment>\n          <div className=\"bootcode-container\">\n            <h2>Boot code</h2>\n            <code>\n              <pre>\n                <strong>00000000</strong>\n                {'  '}31 fe ff af 21 ff 9f 32 cb 7c 20 fb 21 26 ff 0e\n                <br />\n                <strong>00000010</strong>\n                {'  '}11 3e 80 32 e2 0c 3e f3 e2 32 3e 77 77 3e fc e0\n                <br />\n                <strong>00000020</strong>\n                {'  '}47 11 04 01 21 10 80 1a cd 95 00 cd 96 00 13 7b\n                <br />\n                <strong>00000030</strong>\n                {'  '}fe 34 20 f3 11 d8 00 06 08 1a 13 22 23 05 20 f9\n                <br />\n                <strong>00000040</strong>\n                {'  '}3e 19 ea 10 99 21 2f 99 0e 0c 3d 28 08 32 0d 20\n                <br />\n                <strong>00000050</strong>\n                {'  '}f9 2e 0f 18 f3 67 3e 64 57 e0 42 3e 91 e0 40 04\n                <br />\n                <strong>00000060</strong>\n                {'  '}1e 02 0e 0c f0 44 fe 90 20 fa 0d 20 f7 1d 20 f2\n                <br />\n                <strong>00000070</strong>\n                {'  '}0e 13 24 7c 1e 83 fe 62 28 06 1e c1 fe 64 20 06\n                <br />\n                <strong>00000080</strong>\n                {'  '}7b e2 0c 3e 87 e2 f0 42 90 e0 42 15 20 d2 05 20\n                <br />\n                <strong>00000090</strong>\n                {'  '}4f 16 20 18 cb 4f 06 04 c5 cb 11 17 c1 cb 11 17\n                <br />\n                <strong>000000a0</strong>\n                {'  '}05 20 f5 22 23 22 23 c9 ce ed 66 66 cc 0d 00 0b\n                <br />\n                <strong>000000b0</strong>\n                {'  '}03 73 00 83 00 0c 00 0d 00 08 11 1f 88 89 00 0e\n                <br />\n                <strong>000000c0</strong>\n                {'  '}dc cc 6e e6 dd dd d9 99 bb bb 67 63 6e 0e ec cc\n                <br />\n                <strong>000000d0</strong>\n                {'  '}dd dc 99 9f bb b9 33 3e 3c 42 b9 a5 b9 a5 42 3c\n                <br />\n                <strong>000000e0</strong>\n                {'  '}21 04 01 11 a8 00 1a 13 be 20 fe 23 7d fe 34 20\n                <br />\n                <strong>000000f0</strong>\n                {'  '}f5 06 19 78 86 23 05 20 fb 86 20 fe 3e 01 e0 50\n                <br />\n              </pre>\n            </code>\n          </div>\n          <div className=\"disassembled-bootcode-container\">\n            <h2>Disassembled boot code</h2>\n            <code>\n              <pre>\n                {disassemble(bootCode).map((line) => {\n                  return (\n                    <Fragment key={line.position}>\n                      <span>\n                        <strong>{line.position}</strong>\n                        {'    '}\n                        {line.code}\n                      </span>\n                      <br />\n                    </Fragment>\n                  );\n                })}\n              </pre>\n            </code>\n          </div>\n        </Fragment>\n      ) : null}\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}