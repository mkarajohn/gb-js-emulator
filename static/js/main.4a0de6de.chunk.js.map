{"version":3,"sources":["utils.ts","opcodes.ts","disassembler.ts","bootcode.ts","App.tsx","index.js"],"names":["convertNumberToHexString","n","toString","convertHexStringToDecimalNumber","s","parseInt","zeroPad","paddedLength","numberAsHexString","doPadding","hexString","pad","length","generateOpcodeToken","instruction","operandType","operand","opcodes","Array","cbOpcodes","generateDisassembledInstructionToken","opcodeToken","bytecode","index","position","code","replace","disassemble","disassembledCode","i","opcode","referencedObOpcodeToken","push","bootCode","bootCodeUIntArr","Uint8Array","emptyBootcode","App","useState","setBootCode","useEffect","setTimeout","bootcode","window","className","height","width","type","onChange","e","target","files","reader","FileReader","onload","result","readAsArrayBuffer","map","line","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a0de6de.chunk.js","sourcesContent":["export function convertNumberToHexString(n: number) {\n  return n.toString(16);\n}\n\nexport function convertHexStringToDecimalNumber(s: string) {\n  return parseInt(s, 16);\n}\n\nexport function zeroPad(n: number | string, paddedLength: number = 4) {\n  const numberAsHexString = typeof n === 'number' ? convertNumberToHexString(n) : n;\n\n  function doPadding(paddedLength: number, hexString: string) {\n    let pad = '';\n    while (pad.length < paddedLength - hexString.length) {\n      pad += '0';\n    }\n\n    return `${pad}${hexString}`;\n  }\n\n  return doPadding(paddedLength, numberAsHexString);\n}\n","import type { OperandTypes, OpcodeToken } from './types.d';\n\nfunction generateOpcodeToken(\n  instruction: string,\n  length: number,\n  operandType: OperandTypes | null = null\n): OpcodeToken {\n  return {\n    instruction,\n    length,\n    operand: operandType,\n  };\n}\n\nconst opcodes: (OpcodeToken | undefined)[] = new Array(0x100);\nconst cbOpcodes: (OpcodeToken | undefined)[] = new Array(0x100);\n\nopcodes[0x00] = generateOpcodeToken('NOP', 1);\nopcodes[0x04] = generateOpcodeToken('INC B', 1);\nopcodes[0x05] = generateOpcodeToken('DEC B', 1);\nopcodes[0x06] = generateOpcodeToken('LD B,${OPERAND}', 2, 'd8');\nopcodes[0x08] = generateOpcodeToken('LD (${OPERAND}),SP', 3, 'a16');\nopcodes[0x0c] = generateOpcodeToken('INC C', 1);\nopcodes[0x0d] = generateOpcodeToken('DEC C', 1);\nopcodes[0x0e] = generateOpcodeToken('LD C,${OPERAND}', 2, 'd8');\nopcodes[0x11] = generateOpcodeToken('LD DE,${OPERAND}', 3, 'd16');\nopcodes[0x13] = generateOpcodeToken('INC DE', 1);\nopcodes[0x15] = generateOpcodeToken('DEC D', 1);\nopcodes[0x16] = generateOpcodeToken('LD D,${OPERAND}', 2, 'd8');\nopcodes[0x17] = generateOpcodeToken('RLA', 1);\nopcodes[0x18] = generateOpcodeToken('JR ${OPERAND}', 2, 'r8');\nopcodes[0x1a] = generateOpcodeToken('LD A,(DE)', 1);\nopcodes[0x1d] = generateOpcodeToken('DEC E', 1);\nopcodes[0x1e] = generateOpcodeToken('LD E,${OPERAND}', 2, 'd8');\nopcodes[0x20] = generateOpcodeToken('JR NZ,SIGNED ${OPERAND}', 2, 'r8');\nopcodes[0x21] = generateOpcodeToken('LD HL,${OPERAND}', 3, 'd16');\nopcodes[0x22] = generateOpcodeToken('LD (HL+),A', 1);\nopcodes[0x23] = generateOpcodeToken('INC HL', 1);\nopcodes[0x24] = generateOpcodeToken('INC H', 1);\nopcodes[0x28] = generateOpcodeToken('JR Z,${OPERAND}', 2, 'r8');\nopcodes[0x2e] = generateOpcodeToken('LD L,${OPERAND}', 2, 'd8');\nopcodes[0x31] = generateOpcodeToken('LD SP,${OPERAND}', 3, 'd16');\nopcodes[0x32] = generateOpcodeToken('LD (HL-),A', 1);\nopcodes[0x3d] = generateOpcodeToken('DEC A', 1);\nopcodes[0x3e] = generateOpcodeToken('LD A,${OPERAND}', 2, 'd8');\nopcodes[0x4f] = generateOpcodeToken('SUB A,L', 1);\nopcodes[0x57] = generateOpcodeToken('LD D,A', 1);\nopcodes[0x67] = generateOpcodeToken('LD H,A', 1);\nopcodes[0x77] = generateOpcodeToken('LD (HL),A', 1);\nopcodes[0x7b] = generateOpcodeToken('LD A,E', 1);\nopcodes[0x7c] = generateOpcodeToken('LD A,H', 1);\nopcodes[0x90] = generateOpcodeToken('SUB A,B', 1);\nopcodes[0xaf] = generateOpcodeToken('XOR A', 1);\nopcodes[0xc1] = generateOpcodeToken('POP BC', 1);\nopcodes[0xc5] = generateOpcodeToken('PUSH BC', 1);\nopcodes[0xc9] = generateOpcodeToken('RET', 1);\nopcodes[0xcb] = generateOpcodeToken('PREFIX CB', 1);\nopcodes[0xcd] = generateOpcodeToken('CALL ${OPERAND}', 3, 'a16');\nopcodes[0xce] = generateOpcodeToken('ADC A,${OPERAND}', 2, 'd8');\nopcodes[0xe0] = generateOpcodeToken('LD ($FF00+${OPERAND}),A', 2, 'a8');\nopcodes[0xe2] = generateOpcodeToken('LD (FF00+C),A', 1);\nopcodes[0xea] = generateOpcodeToken('LD (${OPERAND}),A', 3, 'a16');\nopcodes[0xf0] = generateOpcodeToken('LD A,($FF00+${OPERAND})', 2, 'a8');\nopcodes[0xf9] = generateOpcodeToken('LD SP,HL', 1);\nopcodes[0xfe] = generateOpcodeToken('CP ${OPERAND}', 2, 'd8');\n\ncbOpcodes[0x11] = generateOpcodeToken('RL C', 2);\ncbOpcodes[0x7c] = generateOpcodeToken('BIT 7,H', 2);\n\nexport { opcodes, cbOpcodes };\n","import { convertHexStringToDecimalNumber, convertNumberToHexString, zeroPad } from './utils';\nimport { opcodes, cbOpcodes } from './opcodes';\nimport type { DisassembledInstructionToken, OpcodeToken } from './types.d';\n\nfunction generateDisassembledInstructionToken(\n  opcodeToken: OpcodeToken | undefined,\n  bytecode: Uint8Array,\n  index: number\n): DisassembledInstructionToken {\n  if (!opcodeToken) {\n    return {\n      position: `$${zeroPad(index, 4)}`,\n      code: `Unknown opcode`,\n    };\n  }\n\n  switch (opcodeToken.operand) {\n    case 'a8':\n    case 'r8':\n    case 'd8':\n      return {\n        position: `$${zeroPad(index, 4)}`,\n        code: opcodeToken.instruction.replace(\n          '${OPERAND}',\n          `$${zeroPad(convertNumberToHexString(bytecode[index + 1]), 2)}`\n        ),\n      };\n    case 'a16':\n    case 'd16':\n      return {\n        position: `$${zeroPad(index, 4)}`,\n        code: opcodeToken.instruction.replace(\n          '${OPERAND}',\n          `$${zeroPad(convertNumberToHexString(bytecode[index + 2]), 2)}${zeroPad(\n            convertNumberToHexString(bytecode[index + 1]),\n            2\n          )}`\n        ),\n      };\n    default:\n      return {\n        position: `$${zeroPad(index, 4)}`,\n        code: `${opcodeToken.instruction}`,\n      };\n  }\n}\n\nfunction disassemble(bytecode: Uint8Array) {\n  const disassembledCode: DisassembledInstructionToken[] = [];\n\n  for (let i = 0; i < bytecode.length; ) {\n    const opcode = bytecode[i];\n    const opcodeToken = opcodes[opcode];\n\n    if (!opcodeToken) {\n      disassembledCode.push(generateDisassembledInstructionToken(opcodeToken, bytecode, i));\n      i++;\n    } else {\n      switch (opcode) {\n        // opcode 0xcb references opcodes from the CB opcode table so it needs special handling\n        case convertHexStringToDecimalNumber('0xcb'): {\n          const referencedObOpcodeToken = cbOpcodes[bytecode[i + opcodeToken.length]];\n          disassembledCode.push(\n            generateDisassembledInstructionToken(referencedObOpcodeToken, bytecode, i)\n          );\n          if (referencedObOpcodeToken) {\n            i += referencedObOpcodeToken.length;\n          } else {\n            i += opcodeToken.length;\n          }\n          break;\n        }\n        default:\n          disassembledCode.push(generateDisassembledInstructionToken(opcodeToken, bytecode, i));\n          i += opcodeToken.length;\n      }\n    }\n  }\n\n  return disassembledCode;\n}\n\nexport default disassemble;\n","import { convertHexStringToDecimalNumber } from './utils';\n\nconst bootCode =\n  /* 00000000 */ '31 fe ff af 21 ff 9f 32 cb 7c 20 fb 21 26 ff 0e ' +\n  /* 00000010 */ '11 3e 80 32 e2 0c 3e f3 e2 32 3e 77 77 3e fc e0 ' +\n  /* 00000020 */ '47 11 04 01 21 10 80 1a cd 95 00 cd 96 00 13 7b ' +\n  /* 00000030 */ 'fe 34 20 f3 11 d8 00 06 08 1a 13 22 23 05 20 f9 ' +\n  /* 00000040 */ '3e 19 ea 10 99 21 2f 99 0e 0c 3d 28 08 32 0d 20 ' +\n  /* 00000050 */ 'f9 2e 0f 18 f3 67 3e 64 57 e0 42 3e 91 e0 40 04 ' +\n  /* 00000060 */ '1e 02 0e 0c f0 44 fe 90 20 fa 0d 20 f7 1d 20 f2 ' +\n  /* 00000070 */ '0e 13 24 7c 1e 83 fe 62 28 06 1e c1 fe 64 20 06 ' +\n  /* 00000080 */ '7b e2 0c 3e 87 e2 f0 42 90 e0 42 15 20 d2 05 20 ' +\n  /* 00000090 */ '4f 16 20 18 cb 4f 06 04 c5 cb 11 17 c1 cb 11 17 ' +\n  /* 000000a0 */ '05 20 f5 22 23 22 23 c9 ce ed 66 66 cc 0d 00 0b ' +\n  /* 000000b0 */ '03 73 00 83 00 0c 00 0d 00 08 11 1f 88 89 00 0e ' +\n  /* 000000c0 */ 'dc cc 6e e6 dd dd d9 99 bb bb 67 63 6e 0e ec cc ' +\n  /* 000000d0 */ 'dd dc 99 9f bb b9 33 3e 3c 42 b9 a5 b9 a5 42 3c ' +\n  /* 000000e0 */ '21 04 01 11 a8 00 1a 13 be 20 fe 23 7d fe 34 20 ' +\n  /* 000000f0 */ 'f5 06 19 78 86 23 05 20 fb 86 20 fe 3e 01 e0 50';\n\n// The bootcode is 256 bytes, so that's how long the typed array should be\nconst bootCodeUIntArr = new Uint8Array(256);\n\n// Each character couple is a byte in hex\n// Step is 3 to accommodate for the spaces, otherwise it would be 2\nconst loopStep = 3;\n\nfor (let i = 0; i < bootCode.length; i += loopStep) {\n  // Keep the bootCodeUIntArr index incrementing by +1 on each iteration\n  bootCodeUIntArr[i / loopStep] = convertHexStringToDecimalNumber(\n    `${bootCode[i]}${bootCode[i + 1]}`\n  );\n}\n\nexport default bootCodeUIntArr;\n","import disassemble from './disassembler';\nimport { Fragment, useEffect, useState } from 'react';\nimport bootcode from './bootcode';\nimport { MEMORY } from './memory';\n\nconst emptyBootcode = new Uint8Array(256);\n\nfunction App() {\n  const [bootCode, setBootCode] = useState(emptyBootcode);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setBootCode(bootcode);\n    }, 2000);\n  }, []);\n\n  //@ts-ignore\n  window.bootCode = bootCode;\n\n  return (\n    <Fragment>\n      <div className=\"screen-container\">\n        <h2>GameBoy emulator</h2>\n        <canvas height={144} width={160} />\n        {bootCode ? (\n          <span>{bootCode === emptyBootcode ? 'loading bootcode' : 'bootcode loaded'}</span>\n        ) : (\n          <Fragment>\n            <span>drop the bootcode here</span>\n            <input\n              type=\"file\"\n              onChange={(e) => {\n                //@ts-ignore\n                if (e.target.files.length) {\n                  const reader = new FileReader();\n\n                  reader.onload = function (e) {\n                    //@ts-ignore\n                    setBootCode(new Uint8Array(e.target.result));\n                  };\n\n                  //@ts-ignore\n                  reader.readAsArrayBuffer(e.target.files[0]);\n                }\n              }}\n            />\n          </Fragment>\n        )}\n      </div>\n      {bootCode ? (\n        <Fragment>\n          <div className=\"bootcode-container\">\n            <h2>Boot code</h2>\n            <code>\n              {bootCode === emptyBootcode ? (\n                <pre>\n                  <strong>{'       x0 x1 x2 x3 x4 x5 x6 x7  x8 x9 xa xb xc xd xe xf'}</strong>\n                  <br />\n                  <br />\n                  <strong>$000x</strong>\n                  {'  '}00 00 00 00 00 00 00 00{'  '}00 00 00 00 00 00 00 00\n                  <br />\n                  <strong>$001x</strong>\n                  {'  '}00 00 00 00 00 00 00 00{'  '}00 00 00 00 00 00 00 00\n                  <br />\n                  <strong>$002x</strong>\n                  {'  '}00 00 00 00 00 00 00 00{'  '}00 00 00 00 00 00 00 00\n                  <br />\n                  <strong>$003x</strong>\n                  {'  '}00 00 00 00 00 00 00 00{'  '}00 00 00 00 00 00 00 00\n                  <br />\n                  <strong>$004x</strong>\n                  {'  '}00 00 00 00 00 00 00 00{'  '}00 00 00 00 00 00 00 00\n                  <br />\n                  <strong>$005x</strong>\n                  {'  '}00 00 00 00 00 00 00 00{'  '}00 00 00 00 00 00 00 00\n                  <br />\n                  <strong>$006x</strong>\n                  {'  '}00 00 00 00 00 00 00 00{'  '}00 00 00 00 00 00 00 00\n                  <br />\n                  <strong>$007x</strong>\n                  {'  '}00 00 00 00 00 00 00 00{'  '}00 00 00 00 00 00 00 00\n                  <br />\n                  <strong>$008x</strong>\n                  {'  '}00 00 00 00 00 00 00 00{'  '}00 00 00 00 00 00 00 00\n                  <br />\n                  <strong>$009x</strong>\n                  {'  '}00 00 00 00 00 00 00 00{'  '}00 00 00 00 00 00 00 00\n                  <br />\n                  <strong>$00ax</strong>\n                  {'  '}00 00 00 00 00 00 00 00{'  '}00 00 00 00 00 00 00 00\n                  <br />\n                  <strong>$00bx</strong>\n                  {'  '}00 00 00 00 00 00 00 00{'  '}00 00 00 00 00 00 00 00\n                  <br />\n                  <strong>$00cx</strong>\n                  {'  '}00 00 00 00 00 00 00 00{'  '}00 00 00 00 00 00 00 00\n                  <br />\n                  <strong>$00dx</strong>\n                  {'  '}00 00 00 00 00 00 00 00{'  '}00 00 00 00 00 00 00 00\n                  <br />\n                  <strong>$00ex</strong>\n                  {'  '}00 00 00 00 00 00 00 00{'  '}00 00 00 00 00 00 00 00\n                  <br />\n                  <strong>$00fx</strong>\n                  {'  '}00 00 00 00 00 00 00 00{'  '}00 00 00 00 00 00 00 00\n                  <br />\n                </pre>\n              ) : (\n                <pre>\n                  <strong>{'       x0 x1 x2 x3 x4 x5 x6 x7  x8 x9 xa xb xc xd xe xf'}</strong>\n                  <br />\n                  <br />\n                  <strong>$000x</strong>\n                  {'  '}31 fe ff af 21 ff 9f 32{'  '}cb 7c 20 fb 21 26 ff 0e\n                  <br />\n                  <strong>$001x</strong>\n                  {'  '}11 3e 80 32 e2 0c 3e f3{'  '}e2 32 3e 77 77 3e fc e0\n                  <br />\n                  <strong>$002x</strong>\n                  {'  '}47 11 04 01 21 10 80 1a{'  '}cd 95 00 cd 96 00 13 7b\n                  <br />\n                  <strong>$003x</strong>\n                  {'  '}fe 34 20 f3 11 d8 00 06{'  '}08 1a 13 22 23 05 20 f9\n                  <br />\n                  <strong>$004x</strong>\n                  {'  '}3e 19 ea 10 99 21 2f 99{'  '}0e 0c 3d 28 08 32 0d 20\n                  <br />\n                  <strong>$005x</strong>\n                  {'  '}f9 2e 0f 18 f3 67 3e 64{'  '}57 e0 42 3e 91 e0 40 04\n                  <br />\n                  <strong>$006x</strong>\n                  {'  '}1e 02 0e 0c f0 44 fe 90{'  '}20 fa 0d 20 f7 1d 20 f2\n                  <br />\n                  <strong>$007x</strong>\n                  {'  '}0e 13 24 7c 1e 83 fe 62{'  '}28 06 1e c1 fe 64 20 06\n                  <br />\n                  <strong>$008x</strong>\n                  {'  '}7b e2 0c 3e 87 e2 f0 42{'  '}90 e0 42 15 20 d2 05 20\n                  <br />\n                  <strong>$009x</strong>\n                  {'  '}4f 16 20 18 cb 4f 06 04{'  '}c5 cb 11 17 c1 cb 11 17\n                  <br />\n                  <strong>$00ax</strong>\n                  {'  '}05 20 f5 22 23 22 23 c9{'  '}ce ed 66 66 cc 0d 00 0b\n                  <br />\n                  <strong>$00bx</strong>\n                  {'  '}03 73 00 83 00 0c 00 0d{'  '}00 08 11 1f 88 89 00 0e\n                  <br />\n                  <strong>$00cx</strong>\n                  {'  '}dc cc 6e e6 dd dd d9 99{'  '}bb bb 67 63 6e 0e ec cc\n                  <br />\n                  <strong>$00dx</strong>\n                  {'  '}dd dc 99 9f bb b9 33 3e{'  '}3c 42 b9 a5 b9 a5 42 3c\n                  <br />\n                  <strong>$00ex</strong>\n                  {'  '}21 04 01 11 a8 00 1a 13{'  '}be 20 fe 23 7d fe 34 20\n                  <br />\n                  <strong>$00fx</strong>\n                  {'  '}f5 06 19 78 86 23 05 20{'  '}fb 86 20 fe 3e 01 e0 50\n                  <br />\n                </pre>\n              )}\n            </code>\n          </div>\n          <div className=\"disassembled-bootcode-container\">\n            <h2>Disassembled boot code</h2>\n            <code>\n              <pre>\n                {disassemble(bootCode).map((line) => {\n                  return (\n                    <Fragment key={line.position}>\n                      <span>\n                        <strong>{line.position}</strong>\n                        {'    '}\n                        {line.code}\n                      </span>\n                      <br />\n                    </Fragment>\n                  );\n                })}\n              </pre>\n            </code>\n          </div>\n        </Fragment>\n      ) : null}\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}