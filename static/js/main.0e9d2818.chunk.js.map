{"version":3,"sources":["utils.ts","opcodes.ts","disassembler.ts","bootcode.ts","App.tsx","index.js"],"names":["convertNumberToHexString","n","toString","convertHexStringToDecimalNumber","s","parseInt","zeroPadHalfByte","numberAsHexString","length","Error","generateOpcodeToken","instruction","cycles","flags","operandType","high","low","operand","opcodes","Array","cbOpcodes","generateDisassembledInstructionToken","opcodeToken","bytecode","index","position","code","replace","Z","N","H","undefined","C","disassemble","disassembledCode","i","opcode","referencedObOpcodeToken","push","bootCode","bootCodeUIntArr","Uint8Array","App","useState","bootcode","setBootCode","console","log","window","className","height","width","type","onChange","e","target","files","reader","FileReader","onload","result","readAsArrayBuffer","map","line","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e9d2818.chunk.js","sourcesContent":["export function convertNumberToHexString(n: number) {\n  return n.toString(16);\n}\n\nexport function convertHexStringToDecimalNumber(s: string) {\n  return parseInt(s, 16);\n}\n\nexport function zeroPadHalfByte(n: number | string) {\n  const numberAsHexString = typeof n === 'number' ? convertNumberToHexString(n) : n;\n\n  switch (numberAsHexString.length) {\n    case 0:\n      return '0000';\n    case 1:\n      return `000${numberAsHexString}`;\n    case 2:\n      return `00${numberAsHexString}`;\n    case 3:\n      return `0${numberAsHexString}`;\n    case 4:\n      return numberAsHexString;\n    default:\n      throw new Error('Invalid number passed to zeropad');\n  }\n}\n","import type { Flags, OperandTypes, OpcodeToken } from './types.d';\n\nfunction generateOpcodeToken(\n  instruction: string,\n  length: number,\n  cycles: number | { high: number; low: number },\n  flags: Flags | null = null,\n  operandType: OperandTypes | null = null\n): OpcodeToken {\n  return {\n    instruction,\n    length,\n    cycles: typeof cycles === 'number' ? { high: cycles, low: cycles } : cycles,\n    flags,\n    operand: operandType,\n  };\n}\n\nconst opcodes: (OpcodeToken | undefined)[] = new Array(256);\nconst cbOpcodes: (OpcodeToken | undefined)[] = new Array(256);\n\nopcodes[0x00] = generateOpcodeToken('NOP', 1, 4);\nopcodes[0x0c] = generateOpcodeToken('INC C', 1, 1, {\n  Z: 'depends',\n  N: 'reset',\n  H: 'depends',\n});\nopcodes[0x0e] = generateOpcodeToken('LD C,${OPERAND}', 2, 8, undefined, 'd8');\nopcodes[0x11] = generateOpcodeToken('LD DE,${OPERAND}', 3, 12, undefined, 'd16');\nopcodes[0x13] = generateOpcodeToken('INC DE', 1, 8);\nopcodes[0x1a] = generateOpcodeToken('LD A,(DE)', 1, 8, undefined);\nopcodes[0x20] = generateOpcodeToken(\n  'JR NZ,SIGNED ${OPERAND}',\n  2,\n  { high: 12, low: 8 },\n  undefined,\n  'r8'\n);\nopcodes[0x21] = generateOpcodeToken('LD HL,${OPERAND}', 3, 12, undefined, 'd16');\nopcodes[0x31] = generateOpcodeToken('LD SP,${OPERAND}', 3, 12, undefined, 'd16');\nopcodes[0x32] = generateOpcodeToken('LD (HL-),A', 1, 8);\nopcodes[0x3e] = generateOpcodeToken('LD A,${OPERAND}', 2, 8, undefined, 'd8');\nopcodes[0x77] = generateOpcodeToken('LD (HL),A', 1, 8);\nopcodes[0x7b] = generateOpcodeToken('LD A,E', 1, 4);\nopcodes[0xaf] = generateOpcodeToken('XOR A', 1, 4, { Z: 'depends' });\nopcodes[0xcb] = generateOpcodeToken('PREFIX CB', 1, 4);\nopcodes[0xcd] = generateOpcodeToken('CALL ${OPERAND}', 3, 24, undefined, 'a16');\nopcodes[0xe0] = generateOpcodeToken('LD ($FF00+${OPERAND}),A', 2, 12, undefined, 'a8');\nopcodes[0xe2] = generateOpcodeToken('LD (C),A', 1, 8);\nopcodes[0xfe] = generateOpcodeToken(\n  'CP ${OPERAND}',\n  2,\n  8,\n  { Z: 'depends', N: 'set', H: 'depends', C: 'depends' },\n  'd8'\n);\n\ncbOpcodes[0x7c] = generateOpcodeToken('BIT 7,H', 2, 8, { Z: 'depends', N: 'reset', H: 'set' });\n\nexport { opcodes, cbOpcodes };\n","import {\n  convertHexStringToDecimalNumber,\n  convertNumberToHexString,\n  zeroPadHalfByte,\n} from './utils';\nimport { opcodes, cbOpcodes } from './opcodes';\nimport type { DisassembledInstructionToken, OpcodeToken } from './types.d';\n\nfunction generateDisassembledInstructionToken(\n  opcodeToken: OpcodeToken | undefined,\n  bytecode: Uint8Array,\n  index: number\n): DisassembledInstructionToken {\n  if (!opcodeToken) {\n    return {\n      position: `$${zeroPadHalfByte(index)}`,\n      code: `Unknown opcode`,\n    };\n  }\n\n  switch (opcodeToken.operand) {\n    case 'a8':\n    case 'r8':\n    case 'd8':\n      return {\n        position: `$${zeroPadHalfByte(index)}`,\n        code: opcodeToken.instruction.replace(\n          '${OPERAND}',\n          `$${convertNumberToHexString(bytecode[index + 1])}`\n        ),\n      };\n    case 'a16':\n    case 'd16':\n      return {\n        position: `$${zeroPadHalfByte(index)}`,\n        code: opcodeToken.instruction.replace(\n          '${OPERAND}',\n          `$${zeroPadHalfByte(\n            convertNumberToHexString(bytecode[index + 2]) +\n              convertNumberToHexString(bytecode[index + 1])\n          )}`\n        ),\n      };\n    default:\n      return {\n        position: `$${zeroPadHalfByte(index)}`,\n        code: `${opcodeToken.instruction}`,\n      };\n  }\n}\n\nfunction disassemble(bytecode: Uint8Array) {\n  const disassembledCode: DisassembledInstructionToken[] = [];\n\n  for (let i = 0; i < bytecode.length; ) {\n    const opcode = bytecode[i];\n    const opcodeToken = opcodes[opcode];\n\n    if (!opcodeToken) {\n      disassembledCode.push(generateDisassembledInstructionToken(opcodeToken, bytecode, i));\n      i++;\n    } else {\n      switch (opcode) {\n        // opcode 0xcb references opcodes from the CB opcode table so it needs special handling\n        case convertHexStringToDecimalNumber('0xcb'): {\n          const referencedObOpcodeToken = cbOpcodes[bytecode[i + opcodeToken.length]];\n          disassembledCode.push(\n            generateDisassembledInstructionToken(referencedObOpcodeToken, bytecode, i)\n          );\n          if (referencedObOpcodeToken) {\n            i += referencedObOpcodeToken.length;\n          } else {\n            i += opcodeToken.length;\n          }\n          break;\n        }\n        default:\n          disassembledCode.push(generateDisassembledInstructionToken(opcodeToken, bytecode, i));\n          i += opcodeToken.length;\n      }\n    }\n  }\n\n  return disassembledCode;\n}\n\nexport default disassemble;\n","import { convertHexStringToDecimalNumber } from './utils';\n\nconst bootCode =\n  /* 00000000 */ '31 fe ff af 21 ff 9f 32 cb 7c 20 fb 21 26 ff 0e ' +\n  /* 00000010 */ '11 3e 80 32 e2 0c 3e f3 e2 32 3e 77 77 3e fc e0 ' +\n  /* 00000020 */ '47 11 04 01 21 10 80 1a cd 95 00 cd 96 00 13 7b ' +\n  /* 00000030 */ 'fe 34 20 f3 11 d8 00 06 08 1a 13 22 23 05 20 f9 ' +\n  /* 00000040 */ '3e 19 ea 10 99 21 2f 99 0e 0c 3d 28 08 32 0d 20 ' +\n  /* 00000050 */ 'f9 2e 0f 18 f3 67 3e 64 57 e0 42 3e 91 e0 40 04 ' +\n  /* 00000060 */ '1e 02 0e 0c f0 44 fe 90 20 fa 0d 20 f7 1d 20 f2 ' +\n  /* 00000070 */ '0e 13 24 7c 1e 83 fe 62 28 06 1e c1 fe 64 20 06 ' +\n  /* 00000080 */ '7b e2 0c 3e 87 e2 f0 42 90 e0 42 15 20 d2 05 20 ' +\n  /* 00000090 */ '4f 16 20 18 cb 4f 06 04 c5 cb 11 17 c1 cb 11 17 ' +\n  /* 000000a0 */ '05 20 f5 22 23 22 23 c9 ce ed 66 66 cc 0d 00 0b ' +\n  /* 000000b0 */ '03 73 00 83 00 0c 00 0d 00 08 11 1f 88 89 00 0e ' +\n  /* 000000c0 */ 'dc cc 6e e6 dd dd d9 99 bb bb 67 63 6e 0e ec cc ' +\n  /* 000000d0 */ 'dd dc 99 9f bb b9 33 3e 3c 42 b9 a5 b9 a5 42 3c ' +\n  /* 000000e0 */ '21 04 01 11 a8 00 1a 13 be 20 fe 23 7d fe 34 20 ' +\n  /* 000000f0 */ 'f5 06 19 78 86 23 05 20 fb 86 20 fe 3e 01 e0 50';\n\n// The bootcode is 256 bytes, so that's how long the typed array should be\nconst bootCodeUIntArr = new Uint8Array(256);\n\n// Each character couple is a byte in hex\n// Step is 3 to accommodate for the spaces, otherwise it would be 2\nconst loopStep = 3;\n\nfor (let i = 0; i < bootCode.length; i += loopStep) {\n  // Keep the bootCodeUIntArr index incrementing by +1 on each iteration\n  bootCodeUIntArr[i / loopStep] = convertHexStringToDecimalNumber(\n    `${bootCode[i]}${bootCode[i + 1]}`\n  );\n}\n\nexport default bootCodeUIntArr;\n","import disassemble from './disassembler';\nimport { Fragment, useState } from 'react';\nimport bootcode from './bootcode';\n\nfunction App() {\n  const [bootCode, setBootCode] = useState(bootcode);\n\n  console.log(bootCode);\n\n  //@ts-ignore\n  window.bootCode = bootCode;\n\n  return (\n    <Fragment>\n      <div className=\"screen-container\">\n        <h2>GameBoy JS emulator</h2>\n        <canvas height={144} width={160} />\n        {bootCode ? (\n          <span>bootcode loaded</span>\n        ) : (\n          <Fragment>\n            <span>drop the bootcode here</span>\n            <input\n              type=\"file\"\n              onChange={(e) => {\n                //@ts-ignore\n                if (e.target.files.length) {\n                  const reader = new FileReader();\n\n                  reader.onload = function (e) {\n                    //@ts-ignore\n                    setBootCode(new Uint8Array(e.target.result));\n                  };\n\n                  //@ts-ignore\n                  reader.readAsArrayBuffer(e.target.files[0]);\n                }\n              }}\n            />\n          </Fragment>\n        )}\n      </div>\n      {bootCode ? (\n        <Fragment>\n          <div className=\"bootcode-container\">\n            <h2>Boot code</h2>\n            <code>\n              <pre>\n                <strong>00000000</strong>\n                {'  '}31 fe ff af 21 ff 9f 32{'  '}cb 7c 20 fb 21 26 ff 0e\n                <br />\n                <strong>00000010</strong>\n                {'  '}11 3e 80 32 e2 0c 3e f3{'  '}e2 32 3e 77 77 3e fc e0\n                <br />\n                <strong>00000020</strong>\n                {'  '}47 11 04 01 21 10 80 1a{'  '}cd 95 00 cd 96 00 13 7b\n                <br />\n                <strong>00000030</strong>\n                {'  '}fe 34 20 f3 11 d8 00 06{'  '}08 1a 13 22 23 05 20 f9\n                <br />\n                <strong>00000040</strong>\n                {'  '}3e 19 ea 10 99 21 2f 99{'  '}0e 0c 3d 28 08 32 0d 20\n                <br />\n                <strong>00000050</strong>\n                {'  '}f9 2e 0f 18 f3 67 3e 64{'  '}57 e0 42 3e 91 e0 40 04\n                <br />\n                <strong>00000060</strong>\n                {'  '}1e 02 0e 0c f0 44 fe 90{'  '}20 fa 0d 20 f7 1d 20 f2\n                <br />\n                <strong>00000070</strong>\n                {'  '}0e 13 24 7c 1e 83 fe 62{'  '}28 06 1e c1 fe 64 20 06\n                <br />\n                <strong>00000080</strong>\n                {'  '}7b e2 0c 3e 87 e2 f0 42{'  '}90 e0 42 15 20 d2 05 20\n                <br />\n                <strong>00000090</strong>\n                {'  '}4f 16 20 18 cb 4f 06 04{'  '}c5 cb 11 17 c1 cb 11 17\n                <br />\n                <strong>000000a0</strong>\n                {'  '}05 20 f5 22 23 22 23 c9{'  '}ce ed 66 66 cc 0d 00 0b\n                <br />\n                <strong>000000b0</strong>\n                {'  '}03 73 00 83 00 0c 00 0d{'  '}00 08 11 1f 88 89 00 0e\n                <br />\n                <strong>000000c0</strong>\n                {'  '}dc cc 6e e6 dd dd d9 99{'  '}bb bb 67 63 6e 0e ec cc\n                <br />\n                <strong>000000d0</strong>\n                {'  '}dd dc 99 9f bb b9 33 3e{'  '}3c 42 b9 a5 b9 a5 42 3c\n                <br />\n                <strong>000000e0</strong>\n                {'  '}21 04 01 11 a8 00 1a 13{'  '}be 20 fe 23 7d fe 34 20\n                <br />\n                <strong>000000f0</strong>\n                {'  '}f5 06 19 78 86 23 05 20{'  '}fb 86 20 fe 3e 01 e0 50\n                <br />\n              </pre>\n            </code>\n          </div>\n          <div className=\"disassembled-bootcode-container\">\n            <h2>Disassembled boot code</h2>\n            <code>\n              <pre>\n                {disassemble(bootcode).map((line) => {\n                  return (\n                    <Fragment key={line.position}>\n                      <span>\n                        <strong>{line.position}</strong>\n                        {'    '}\n                        {line.code}\n                      </span>\n                      <br />\n                    </Fragment>\n                  );\n                })}\n              </pre>\n            </code>\n          </div>\n        </Fragment>\n      ) : null}\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}